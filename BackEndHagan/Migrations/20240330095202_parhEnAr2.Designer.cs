// <auto-generated />
using System;
using BackEndHagan.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace QHijin.Migrations
{
    [DbContext(typeof(HaganContext))]
    [Migration("20240330095202_parhEnAr2")]
    partial class parhEnAr2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEndHagan.Entities.About", b =>
                {
                    b.Property<int>("AboutNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("aboutNo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AboutNo"));

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("empID");

                    b.Property<string>("TextAr")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("textAr");

                    b.Property<string>("TextEn")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("textEn");

                    b.Property<int?>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("int")
                        .HasColumnName("title");

                    b.HasKey("AboutNo")
                        .HasName("PK__About__AB3FDC2C325B1618");

                    b.HasIndex("EmpId");

                    b.ToTable("About", (string)null);
                });

            modelBuilder.Entity("BackEndHagan.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("empID");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varbinary(450)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("TitleId");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("BackEndHagan.Entities.Banner", b =>
                {
                    b.Property<int>("BanarNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("banarNo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BanarNo"));

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("empID");

                    b.Property<string>("ImgLocalPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParphAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParphEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitleAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SubTitleAr");

                    b.Property<string>("SubTitleEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SubTitleEn");

                    b.HasKey("BanarNo")
                        .HasName("PK__Banners__E1C7EEED86D5AABA");

                    b.HasIndex("EmpId");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Bidding", b =>
                {
                    b.Property<int>("BiddingNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("biddingNo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BiddingNo"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ItemNo")
                        .HasColumnType("int")
                        .HasColumnName("itemNo");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("BiddingNo")
                        .HasName("PK__Biddings__B58ECEC7767E4C79");

                    b.HasIndex("ItemNo")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Biddings");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Contact", b =>
                {
                    b.Property<int>("ContactNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactNo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactNo"));

                    b.Property<string>("ContactMsg")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactMsg");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReadTime")
                        .IsUnicode(true)
                        .HasColumnType("datetime2")
                        .HasColumnName("ReadTime");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("ContactNo")
                        .HasName("PK__Contacts__F5CD605BCDDC429C");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("empID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fullName");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.HasKey("EmpId")
                        .HasName("PK__Employee__AFB3EC6D642F11E3");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BackEndHagan.Entities.EmployeeItem", b =>
                {
                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("empID");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<string>("Doctor")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("doctor");

                    b.HasKey("EmpId", "ItemId")
                        .HasName("PK__Employee__1AD9FEE9A85FDFFB");

                    b.HasIndex("ItemId");

                    b.ToTable("EmployeeItem", (string)null);
                });

            modelBuilder.Entity("BackEndHagan.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("dateTime");

                    b.Property<int>("InvoiceNo")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("int")
                        .HasColumnName("invoiceNo");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoice__1252410C2EB72C9C");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("BackEndHagan.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BiddingNo")
                        .HasColumnType("int")
                        .HasColumnName("biddingNo");

                    b.Property<DateTime>("CheckedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("checkedDate");

                    b.Property<string>("Disc")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("disc");

                    b.Property<string>("Health")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("health");

                    b.Property<string>("History")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("history");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.Property<bool>("saleStatus")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__Items__3213E83F9D190F1F");

                    b.HasIndex("UserId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Photo", b =>
                {
                    b.Property<int>("PhId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhId"));

                    b.Property<string>("ImgLocalPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("PhId");

                    b.HasIndex("ItemId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("BackEndHagan.Entities.PriceAndRate", b =>
                {
                    b.Property<int>("PrNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("prNo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrNo"));

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("empID");

                    b.Property<string>("TextAr")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TextAr");

                    b.Property<string>("TextEn")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TextEn");

                    b.HasKey("PrNo")
                        .HasName("PK__PriceAnd__46655E2E38A279F4");

                    b.HasIndex("EmpId");

                    b.ToTable("PriceAndRate", (string)null);
                });

            modelBuilder.Entity("BackEndHagan.Entities.PrivacyAndPolicy", b =>
                {
                    b.Property<int>("PpNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ppNo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PpNo"));

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("empID");

                    b.Property<string>("TextAr")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TextAr");

                    b.Property<string>("TextEn")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TextEn");

                    b.HasKey("PpNo")
                        .HasName("PK__PrivacyA__41E4AB434FEF2435");

                    b.HasIndex("EmpId");

                    b.ToTable("PrivacyAndPolicy", (string)null);
                });

            modelBuilder.Entity("BackEndHagan.Entities.Salary", b =>
                {
                    b.Property<int>("SalaryNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("salaryNo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaryNo"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("empID");

                    b.Property<decimal?>("Money")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("SalaryNo")
                        .HasName("PK__Salaries__336377C79269CBC0");

                    b.HasIndex("EmpId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("BackEndHagan.Entities.SocialMedia", b =>
                {
                    b.Property<int>("SocialMedNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("socialMedNo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocialMedNo"));

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("empID");

                    b.Property<string>("ImgLocalPath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImgLocalPath");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImgUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.HasKey("SocialMedNo")
                        .HasName("PK__SocialMe__37AA6055C1FEBF49");

                    b.HasIndex("EmpId");

                    b.ToTable("SocialMedia");
                });

            modelBuilder.Entity("BackEndHagan.Entities.TermsAndCondition", b =>
                {
                    b.Property<int>("TcNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tcNo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TcNo"));

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("empID");

                    b.Property<string>("TextAr")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TextAr");

                    b.Property<string>("TextEn")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TextEn");

                    b.HasKey("TcNo")
                        .HasName("PK__TermsAnd__E07867518DB768ED");

                    b.HasIndex("EmpId");

                    b.ToTable("TermsAndConditions");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Title", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("titleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TitleId"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("titleName");

                    b.HasKey("TitleId")
                        .HasName("PK__Titles__4D72D6AAEEDF5763");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("BackEndHagan.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FullName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC27442F6DEB");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PassportNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("empID");

                    b.Property<int>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("TitleId");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("TitleId");

                    b.ToTable("Work");
                });

            modelBuilder.Entity("BackEndHagan.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PassportNumber")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TypeUser", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TypeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TypeUser");
                });

            modelBuilder.Entity("BackEndHagan.Entities.About", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Employee", "Emp")
                        .WithMany("Abouts")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__About__empID__48CFD27E");

                    b.Navigation("Emp");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Admin", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Employee", "Emp")
                        .WithMany()
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndHagan.Entities.Title", "Titles")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emp");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Banner", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Employee", "Emp")
                        .WithMany("Banners")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Banners__empID__5441852A");

                    b.Navigation("Emp");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Bidding", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Item", "Items")
                        .WithOne("BiddingNoNavigation")
                        .HasForeignKey("BackEndHagan.Entities.Bidding", "ItemNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndHagan.Entities.User", "User")
                        .WithMany("Biddings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Biddings__userID__32E0915F");

                    b.Navigation("Items");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Contact", b =>
                {
                    b.HasOne("BackEndHagan.Entities.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Mails__userID__300424B4");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndHagan.Entities.EmployeeItem", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Employee", "Emp")
                        .WithMany("EmployeeItems")
                        .HasForeignKey("EmpId")
                        .IsRequired()
                        .HasConstraintName("FK__EmployeeI__empID__3F466844");

                    b.HasOne("BackEndHagan.Entities.Item", "Item")
                        .WithMany("EmployeeItems")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK__EmployeeI__itemI__403A8C7D");

                    b.Navigation("Emp");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Invoice", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Item", "Item")
                        .WithMany("Invoices")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Invoice__itemID__3A81B327");

                    b.HasOne("BackEndHagan.Entities.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Item", b =>
                {
                    b.HasOne("BackEndHagan.Entities.User", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Items__userID__35BCFE0A");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Photo", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Item", "item")
                        .WithMany("Photo")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("item");
                });

            modelBuilder.Entity("BackEndHagan.Entities.PriceAndRate", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Employee", "Emp")
                        .WithMany("PriceAndRates")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__PriceAndR__empID__4E88ABD4");

                    b.Navigation("Emp");
                });

            modelBuilder.Entity("BackEndHagan.Entities.PrivacyAndPolicy", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Employee", "Emp")
                        .WithMany("PrivacyAndPolicies")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__PrivacyAn__empID__4BAC3F29");

                    b.Navigation("Emp");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Salary", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Employee", "Emp")
                        .WithMany("Salaries")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Salaries__empID__45F365D3");

                    b.Navigation("Emp");
                });

            modelBuilder.Entity("BackEndHagan.Entities.SocialMedia", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Employee", "Emp")
                        .WithMany("SocialMedia")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__SocialMed__empID__571DF1D5");

                    b.Navigation("Emp");
                });

            modelBuilder.Entity("BackEndHagan.Entities.TermsAndCondition", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Employee", "Emp")
                        .WithMany("TermsAndConditions")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TermsAndC__empID__5165187F");

                    b.Navigation("Emp");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Work", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Employee", "Emp")
                        .WithMany("Works")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndHagan.Entities.Title", "Title")
                        .WithMany("Works")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emp");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BackEndHagan.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BackEndHagan.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndHagan.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BackEndHagan.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TypeUser", b =>
                {
                    b.HasOne("BackEndHagan.Entities.Type", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndHagan.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndHagan.Entities.Employee", b =>
                {
                    b.Navigation("Abouts");

                    b.Navigation("Banners");

                    b.Navigation("EmployeeItems");

                    b.Navigation("PriceAndRates");

                    b.Navigation("PrivacyAndPolicies");

                    b.Navigation("Salaries");

                    b.Navigation("SocialMedia");

                    b.Navigation("TermsAndConditions");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Item", b =>
                {
                    b.Navigation("BiddingNoNavigation");

                    b.Navigation("EmployeeItems");

                    b.Navigation("Invoices");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("BackEndHagan.Entities.Title", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("BackEndHagan.Entities.User", b =>
                {
                    b.Navigation("Biddings");

                    b.Navigation("Contacts");

                    b.Navigation("Invoices");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
